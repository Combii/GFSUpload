import { ElementRef, ComponentFactoryResolver, ApplicationRef, Injector, EventEmitter } from '@angular/core';
import { TooltipOptions } from './tooltip-options.interface';
import * as ɵngcc0 from '@angular/core';
export interface AdComponent {
    data: any;
    show: boolean;
    close: boolean;
    events: any;
}
export declare class TooltipDirective {
    private initOptions;
    private elementRef;
    private componentFactoryResolver;
    private appRef;
    private injector;
    hideTimeoutId: number;
    destroyTimeoutId: number;
    hideAfterClickTimeoutId: number;
    createTimeoutId: number;
    showTimeoutId: number;
    componentRef: any;
    elementPosition: any;
    _showDelay: any;
    _hideDelay: number;
    _id: any;
    _options: any;
    _defaultOptions: any;
    _destroyDelay: number;
    componentSubscribe: any;
    options: TooltipOptions;
    tooltipValue: string;
    placement: string;
    autoPlacement: boolean;
    contentType: string;
    hideDelayMobile: number;
    hideDelayTouchscreen: number;
    zIndex: number;
    animationDuration: number;
    trigger: string;
    tooltipClass: string;
    display: boolean;
    displayMobile: boolean;
    displayTouchscreen: boolean;
    shadow: boolean;
    theme: boolean;
    offset: number;
    width: number;
    maxWidth: number;
    id: any;
    showDelay: number;
    hideDelay: number;
    hideDelayAfterClick: number;
    pointerEvents: 'auto' | 'none';
    position: {
        top: number;
        left: number;
    };
    readonly isTooltipDestroyed: any;
    destroyDelay: number;
    readonly tooltipPosition: any;
    events: EventEmitter<any>;
    constructor(initOptions: any, elementRef: ElementRef, componentFactoryResolver: ComponentFactoryResolver, appRef: ApplicationRef, injector: Injector);
    onMouseEnter(): void;
    onMouseLeave(): void;
    onClick(): void;
    ngOnInit(): void;
    ngOnChanges(changes: any): void;
    ngOnDestroy(): void;
    getShowDelay(): any;
    getHideDelay(): any;
    getProperties(changes: any): {};
    renameProperties(options: TooltipOptions): TooltipOptions;
    getElementPosition(): void;
    createTooltip(): void;
    destroyTooltip(options?: {
        fast: boolean;
    }): void;
    showTooltipElem(): void;
    hideTooltip(): void;
    appendComponentToBody(component: any, data?: any): void;
    clearTimeouts(): void;
    readonly isDisplayOnHover: boolean;
    readonly isDisplayOnClick: boolean;
    readonly isTouchScreen: boolean;
    applyOptionsDefault(defaultOptions: any, options: any): void;
    handleEvents(event: any): void;
    show(): void;
    hide(): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<TooltipDirective>;
    static ɵdir: ɵngcc0.ɵɵDirectiveDefWithMeta<TooltipDirective, "[tooltip]", never, {
    "options": "options";
    "tooltipValue": "tooltip";
    "placement": "placement";
    "autoPlacement": "autoPlacement";
    "contentType": "content-type";
    "hideDelayMobile": "hide-delay-mobile";
    "hideDelayTouchscreen": "hideDelayTouchscreen";
    "zIndex": "z-index";
    "animationDuration": "animation-duration";
    "trigger": "trigger";
    "tooltipClass": "tooltip-class";
    "display": "display";
    "displayMobile": "display-mobile";
    "displayTouchscreen": "displayTouchscreen";
    "shadow": "shadow";
    "theme": "theme";
    "offset": "offset";
    "width": "width";
    "maxWidth": "max-width";
    "id": "id";
    "showDelay": "show-delay";
    "hideDelay": "hide-delay";
    "hideDelayAfterClick": "hideDelayAfterClick";
    "pointerEvents": "pointerEvents";
    "position": "position";
}, {
    "events": "events";
}, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidG9vbHRpcC5kaXJlY3RpdmUuZC50cyIsInNvdXJjZXMiOlsidG9vbHRpcC5kaXJlY3RpdmUuZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7O0FBRUE7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFxRkE7Iiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRWxlbWVudFJlZiwgQ29tcG9uZW50RmFjdG9yeVJlc29sdmVyLCBBcHBsaWNhdGlvblJlZiwgSW5qZWN0b3IsIEV2ZW50RW1pdHRlciB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBUb29sdGlwT3B0aW9ucyB9IGZyb20gJy4vdG9vbHRpcC1vcHRpb25zLmludGVyZmFjZSc7XHJcbmV4cG9ydCBpbnRlcmZhY2UgQWRDb21wb25lbnQge1xyXG4gICAgZGF0YTogYW55O1xyXG4gICAgc2hvdzogYm9vbGVhbjtcclxuICAgIGNsb3NlOiBib29sZWFuO1xyXG4gICAgZXZlbnRzOiBhbnk7XHJcbn1cclxuZXhwb3J0IGRlY2xhcmUgY2xhc3MgVG9vbHRpcERpcmVjdGl2ZSB7XHJcbiAgICBwcml2YXRlIGluaXRPcHRpb25zO1xyXG4gICAgcHJpdmF0ZSBlbGVtZW50UmVmO1xyXG4gICAgcHJpdmF0ZSBjb21wb25lbnRGYWN0b3J5UmVzb2x2ZXI7XHJcbiAgICBwcml2YXRlIGFwcFJlZjtcclxuICAgIHByaXZhdGUgaW5qZWN0b3I7XHJcbiAgICBoaWRlVGltZW91dElkOiBudW1iZXI7XHJcbiAgICBkZXN0cm95VGltZW91dElkOiBudW1iZXI7XHJcbiAgICBoaWRlQWZ0ZXJDbGlja1RpbWVvdXRJZDogbnVtYmVyO1xyXG4gICAgY3JlYXRlVGltZW91dElkOiBudW1iZXI7XHJcbiAgICBzaG93VGltZW91dElkOiBudW1iZXI7XHJcbiAgICBjb21wb25lbnRSZWY6IGFueTtcclxuICAgIGVsZW1lbnRQb3NpdGlvbjogYW55O1xyXG4gICAgX3Nob3dEZWxheTogYW55O1xyXG4gICAgX2hpZGVEZWxheTogbnVtYmVyO1xyXG4gICAgX2lkOiBhbnk7XHJcbiAgICBfb3B0aW9uczogYW55O1xyXG4gICAgX2RlZmF1bHRPcHRpb25zOiBhbnk7XHJcbiAgICBfZGVzdHJveURlbGF5OiBudW1iZXI7XHJcbiAgICBjb21wb25lbnRTdWJzY3JpYmU6IGFueTtcclxuICAgIG9wdGlvbnM6IFRvb2x0aXBPcHRpb25zO1xyXG4gICAgdG9vbHRpcFZhbHVlOiBzdHJpbmc7XHJcbiAgICBwbGFjZW1lbnQ6IHN0cmluZztcclxuICAgIGF1dG9QbGFjZW1lbnQ6IGJvb2xlYW47XHJcbiAgICBjb250ZW50VHlwZTogc3RyaW5nO1xyXG4gICAgaGlkZURlbGF5TW9iaWxlOiBudW1iZXI7XHJcbiAgICBoaWRlRGVsYXlUb3VjaHNjcmVlbjogbnVtYmVyO1xyXG4gICAgekluZGV4OiBudW1iZXI7XHJcbiAgICBhbmltYXRpb25EdXJhdGlvbjogbnVtYmVyO1xyXG4gICAgdHJpZ2dlcjogc3RyaW5nO1xyXG4gICAgdG9vbHRpcENsYXNzOiBzdHJpbmc7XHJcbiAgICBkaXNwbGF5OiBib29sZWFuO1xyXG4gICAgZGlzcGxheU1vYmlsZTogYm9vbGVhbjtcclxuICAgIGRpc3BsYXlUb3VjaHNjcmVlbjogYm9vbGVhbjtcclxuICAgIHNoYWRvdzogYm9vbGVhbjtcclxuICAgIHRoZW1lOiBib29sZWFuO1xyXG4gICAgb2Zmc2V0OiBudW1iZXI7XHJcbiAgICB3aWR0aDogbnVtYmVyO1xyXG4gICAgbWF4V2lkdGg6IG51bWJlcjtcclxuICAgIGlkOiBhbnk7XHJcbiAgICBzaG93RGVsYXk6IG51bWJlcjtcclxuICAgIGhpZGVEZWxheTogbnVtYmVyO1xyXG4gICAgaGlkZURlbGF5QWZ0ZXJDbGljazogbnVtYmVyO1xyXG4gICAgcG9pbnRlckV2ZW50czogJ2F1dG8nIHwgJ25vbmUnO1xyXG4gICAgcG9zaXRpb246IHtcclxuICAgICAgICB0b3A6IG51bWJlcjtcclxuICAgICAgICBsZWZ0OiBudW1iZXI7XHJcbiAgICB9O1xyXG4gICAgcmVhZG9ubHkgaXNUb29sdGlwRGVzdHJveWVkOiBhbnk7XHJcbiAgICBkZXN0cm95RGVsYXk6IG51bWJlcjtcclxuICAgIHJlYWRvbmx5IHRvb2x0aXBQb3NpdGlvbjogYW55O1xyXG4gICAgZXZlbnRzOiBFdmVudEVtaXR0ZXI8YW55PjtcclxuICAgIGNvbnN0cnVjdG9yKGluaXRPcHRpb25zOiBhbnksIGVsZW1lbnRSZWY6IEVsZW1lbnRSZWYsIGNvbXBvbmVudEZhY3RvcnlSZXNvbHZlcjogQ29tcG9uZW50RmFjdG9yeVJlc29sdmVyLCBhcHBSZWY6IEFwcGxpY2F0aW9uUmVmLCBpbmplY3RvcjogSW5qZWN0b3IpO1xyXG4gICAgb25Nb3VzZUVudGVyKCk6IHZvaWQ7XHJcbiAgICBvbk1vdXNlTGVhdmUoKTogdm9pZDtcclxuICAgIG9uQ2xpY2soKTogdm9pZDtcclxuICAgIG5nT25Jbml0KCk6IHZvaWQ7XHJcbiAgICBuZ09uQ2hhbmdlcyhjaGFuZ2VzOiBhbnkpOiB2b2lkO1xyXG4gICAgbmdPbkRlc3Ryb3koKTogdm9pZDtcclxuICAgIGdldFNob3dEZWxheSgpOiBhbnk7XHJcbiAgICBnZXRIaWRlRGVsYXkoKTogYW55O1xyXG4gICAgZ2V0UHJvcGVydGllcyhjaGFuZ2VzOiBhbnkpOiB7fTtcclxuICAgIHJlbmFtZVByb3BlcnRpZXMob3B0aW9uczogVG9vbHRpcE9wdGlvbnMpOiBUb29sdGlwT3B0aW9ucztcclxuICAgIGdldEVsZW1lbnRQb3NpdGlvbigpOiB2b2lkO1xyXG4gICAgY3JlYXRlVG9vbHRpcCgpOiB2b2lkO1xyXG4gICAgZGVzdHJveVRvb2x0aXAob3B0aW9ucz86IHtcclxuICAgICAgICBmYXN0OiBib29sZWFuO1xyXG4gICAgfSk6IHZvaWQ7XHJcbiAgICBzaG93VG9vbHRpcEVsZW0oKTogdm9pZDtcclxuICAgIGhpZGVUb29sdGlwKCk6IHZvaWQ7XHJcbiAgICBhcHBlbmRDb21wb25lbnRUb0JvZHkoY29tcG9uZW50OiBhbnksIGRhdGE/OiBhbnkpOiB2b2lkO1xyXG4gICAgY2xlYXJUaW1lb3V0cygpOiB2b2lkO1xyXG4gICAgcmVhZG9ubHkgaXNEaXNwbGF5T25Ib3ZlcjogYm9vbGVhbjtcclxuICAgIHJlYWRvbmx5IGlzRGlzcGxheU9uQ2xpY2s6IGJvb2xlYW47XHJcbiAgICByZWFkb25seSBpc1RvdWNoU2NyZWVuOiBib29sZWFuO1xyXG4gICAgYXBwbHlPcHRpb25zRGVmYXVsdChkZWZhdWx0T3B0aW9uczogYW55LCBvcHRpb25zOiBhbnkpOiB2b2lkO1xyXG4gICAgaGFuZGxlRXZlbnRzKGV2ZW50OiBhbnkpOiB2b2lkO1xyXG4gICAgc2hvdygpOiB2b2lkO1xyXG4gICAgaGlkZSgpOiB2b2lkO1xyXG59XHJcbiJdfQ==